generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                     Int                      @id @default(autoincrement())
  nombre                 String
  email                  String                   @unique
  password               String
  rol                    String                   @default("user") // "admin", "user", "agente", etc.

  // NUEVO: flujo primer inicio + trazabilidad
  mustChangePassword     Boolean                  @default(false)
  passwordLastChangedAt  DateTime?
  isActive               Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt @default(now())

  // Relaciones existentes
  propiedades            Propiedad[]
  passwordResetTokens    PasswordResetToken[]

  @@index([rol])
  @@index([isActive])
}

model Region {
  id      Int       @id @default(autoincrement())
  nombre  String    @unique
  ciudades Ciudad[]
}

model Ciudad {
  id        Int     @id @default(autoincrement())
  nombre    String
  regionId  Int
  region    Region  @relation(fields: [regionId], references: [id])
  comunas   Comuna[]
  @@unique([nombre, regionId]) // <-- ¡Esto es lo importante!
}

model Comuna {
  id        Int     @id @default(autoincrement())
  nombre    String
  ciudadId  Int
  ciudad    Ciudad  @relation(fields: [ciudadId], references: [id])
  propiedades Propiedad[]
  @@unique([nombre, ciudadId]) // <-- ¡Esto también!
}



// prisma/schema.prisma

model Propiedad {
  id           Int             @id @default(autoincrement())
  titulo       String
  precio       Float
  imagen       String
  imagenes     String[]
  descripcion  String
  activo       Boolean         @default(true)
  statusId     Int
  status       Status          @relation(fields: [statusId], references: [id])
  typeId       Int
  type         PropertyType    @relation(fields: [typeId], references: [id])
  bedrooms     Int?
  bathrooms    Int?
  area         Int?
  builtArea    Int? 
  address      String?
  lat          Float?
  lng          Float?
  comunaId     Int
  comuna       Comuna          @relation(fields: [comunaId], references: [id])
  parking      Int?
  bodega       Int?
  yearBuilt    Int?
  expenses     Int?
  publishedAt  DateTime?
  usuarioId    Int
  usuario      Usuario         @relation(fields: [usuarioId], references: [id])
  createdAt    DateTime        @default(now())
}

model Status {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  props Propiedad[]
}

model PropertyType {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  props Propiedad[]
}

enum PasswordTokenType {
  reset    // "olvidé mi contraseña"
  invite   // "establecer contraseña" por invitación
}

model PasswordResetToken {
  id         Int               @id @default(autoincrement())
  token      String            @unique
  userId     Int
  user       Usuario           @relation(fields: [userId], references: [id])
  expiresAt  DateTime
  createdAt  DateTime          @default(now())
  type       PasswordTokenType @default(reset)

  usedAt     DateTime?         // útil para invalidar por uso

  @@index([userId, type])
  @@index([expiresAt])
}

